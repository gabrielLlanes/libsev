plugins {
    id 'java-library'
    id 'c'
}

group = 'io.sev'
version = '0.1.0'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // https://mvnrepository.com/artifact/org.jctools/jctools-core
    //implementation libs.jctools.core
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
    withSourcesJar()
}

model {
    platforms {
        x64 { 
            architecture 'x86_64' 
        }
    }
    components {
        sev(NativeLibrarySpec) {
            targetPlatform 'x64'
            binaries {
                all {
                    cCompiler.args '-I', "${System.getenv('JAVA_HOME')}/include"
                    cCompiler.args '-I', "${System.getenv('JAVA_HOME')}/include/linux"
                    linker.args '-luring'
                }
            }
            sources {
                c {
                    source {
                        srcDir 'src/main/c'
                        include '**/*.c'
                    }
                }
            }
        }
    }
}

test {
    systemProperty 'java.library.path', file("${buildDir}/libs/sev/shared").absolutePath
    maxParallelForks = 1
}

def testArgs = ['--enable-native-access=ALL-UNNAMED']
tasks.named('test') {
    // Use JUnit Platform for unit tests.
    jvmArgs += testArgs
    useJUnitPlatform()
    dependsOn 'sevSharedLibrary'
}

tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': project.name,
                    'Implementation-Version': project.version)
    }
    dependsOn 'sevSharedLibrary'
}

tasks.named('assemble') {
    dependsOn 'jar'
}